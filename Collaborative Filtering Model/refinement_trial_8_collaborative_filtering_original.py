# -*- coding: utf-8 -*-
"""Refinement Trial 8 Collaborative Filtering with Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcw5fQMvyOvLPH2koTuJnFtf_lsEfK8j
"""

#Library
import pandas as pd
import numpy as np
import json
import time
from operator import itemgetter
from tqdm.notebook import tqdm

#Read medicines files
medicine = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 1 (Gath &Cl)/clean_medicines_091121.csv")
medicinePresc = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 1 (Gath &Cl)/clean_medicine_prescription_091121.csv")
medicine_dose = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 4 (Collaborative Filtering)/meds_with_dose.csv")

#Read presciption and patient files
fullPresc = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 3 (Data Splitting)/80 Percent Used/prescription_reduced.csv")
patients = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 2 (Preprocessing)/processed_patient.csv")
allPivot = pd.read_csv("/content/drive/MyDrive/Internship (Retracing Project)/Data/Progress 1 (Gath &Cl)/clean_prescription_pivot_report_051121.csv")

medicine_dose.shape

"""

---

"""

def similarityICD10(newPresc, allPresc):
  newData = json.loads(newPresc['differentialDiagnosis'])
  allData = json.loads(allPresc['differentialDiagnosis'])
  count = 0 
  for i in newData:
    if i in allData:
      count += 1
  similarity = ((count)/len(newData)) * 4
  return similarity

def filterICD10(newPresc, allPresc, threshold=2.05
                ):
  dictTemp = dict()
  for idx, record in allPresc.iterrows():
    sim = similarityICD10(newPresc, record)
    dictTemp[record['id']] = {'patientId': record['patientId'],'similarity': sim}
  filtered = dict((k, v) for k, v in dictTemp.items() if v['similarity'] >= threshold)
  prescId = [*filtered]
  #print(prescId)
  allPrescFiltered = allPresc[allPresc['id'].isin(prescId)]
  return filtered, allPrescFiltered

def findSimilarityScore(newPresc, allPresc, icdSim):
  totalScore = icdSim.get(allPresc['id'], {}).get('similarity')

  # age score
  ageCategory = ["Child", "Adolescence", "Adult", "Senior Adult"]
  age1 = patients.loc[patients['id'] == newPresc['patientId'],'patientAgeCategory'].iloc[0]
  age2 = patients.loc[patients['id'] == allPresc['patientId'],'patientAgeCategory'].iloc[0]

  # print(age1)
  index1 = ageCategory.index(age1)
  index2 = ageCategory.index(age2)
  if index1 != index2:
    totalScore += 1 - ((abs(index1-index2))/4)
  else:
    totalScore += 1
 
  # bmi score
  bmi1 = patients.loc[patients['id'] == newPresc['patientId'],'patientBMICategory'].iloc[0]
  bmi2 = patients.loc[patients['id'] == allPresc['patientId'],'patientBMICategory'].iloc[0]
  if bmi1 == bmi2:
    totalScore += 1
    totalScore *= 4
  else:
    totalScore += 0
 
  # gender score
  if newPresc["patientGender"] == allPresc["patientGender"]:
    totalScore += 1
  else:
    totalScore += 0
  return totalScore

def getSimilarPrescriptions(newPresc, allPresc, icdSim):
  dictTemp = dict()
  for idx, record in allPresc.iterrows():
    #print("pertama:",record['id'])
    sim = findSimilarityScore(newPresc, record, icdSim)
    dictTemp[record['id']] = sim
    #print("kedua: ", record['id'])
  mostSimilar = dict(sorted(dictTemp.items(), key=itemgetter(1), reverse=True))
  #print(len(mostSimilar))
  return mostSimilar

def getMedicine(similarPresc, allPivot):
  prescId = similarPresc.keys()
  medList = dict()
  prescResult = allPivot[allPivot["id"].isin(prescId)]
  for idx, row in prescResult.iterrows():
      tempString = 'medicineBrand'
      for i in range(5):
          stringCounter = str(i+1)
          meds = tempString.join(stringCounter)
          if (not pd.isnull(row[meds])):
              if(row[meds] not in medList):
                medList[row[meds]] = 1
              else:
                 medList[row[meds]] += 1
  return dict(sorted(medList.items(), key=itemgetter(1), reverse=True)[:10])

def getMedicine(similarPresc, allPivot):
  prescId = similarPresc.keys()
  medList = dict()
  prescResult = allPivot[allPivot['id'].isin(prescId)]
  for idx, row in prescResult.iterrows():
      tempString = 'medicineBrand'
      for i in range(5):
          stringCounter = str(i+1)
          meds = tempString+stringCounter
          if (not pd.isnull(row[meds])):
              if(row[meds] not in medList):
                  medList[row[meds]] = 1
              else:
                  medList[row[meds]] += 1
  return dict(sorted(medList.items(), key=itemgetter(1), reverse=True)[:10])

def getGTMedicine(testRow):
  meddList = dict()
  tempString = 'medicineBrand'
  for i in range(5):
      stringCounter = str(i + 1)
      meds = tempString + stringCounter
      if (not pd.isnull(testRow[meds].item())):
          if (testRow[meds].item() not in meddList or testRow[meds].item() is not np.nan):
              meddList[testRow[meds].item()] = 1
  return meddList

def getGTMedicine(testRow):
  meddList = dict()
  tempString = 'medicineBrand'
  for i in range(5):
      stringCounter = str(i + 1)
      meds = tempString + stringCounter
      if (not pd.isnull(testRow[meds].all())):
          if (testRow[meds].all() not in meddList or testRow[meds].all() is not np.nan):
              meddList[testRow[meds].all()] = 1
  return meddList

def getMedicineDosage(medList):
  doseDict = dict()
  medError = ["OBH 200 IKAP sir Komb btl 200 ml", "Nystatin NOVE susp100.000 IU/ml btl 15 ml"]
  medBrand = [*medList]
  #print(medBrand)
  for i in medError:
    if i in medBrand: medBrand.remove(i)
  if len(medBrand)==0:
    pass
  else:
    for brand in medBrand:
      if brand in medicine_dose['brand']:
          #print("frequency: ", medicine_dose.loc[medicine_dose['brand'] == brand, 'frequency'].values[0])
          #print("frequencyDd: ", medicine_dose.loc[medicine_dose['brand'] == brand, 'frequencyDd'].values[0])
          #print("timing: ", medicine_dose.loc[medicine_dose['brand'] == brand, 'timing'].values[0])
          #print("duration: ", medicine_dose.loc[medicine_dose['brand'] == brand, 'duration'].values[0])
          #print("amount: ", medicine_dose.loc[medicine_dose['brand'] == brand, 'amount'].values[0])
          doseDict[brand] = {'frequency': medicine_dose.loc[medicine_dose['brand'] == brand, 'frequency'].values[0],
                             'frequencyDd': medicine_dose.loc[medicine_dose['brand'] == brand, 'frequencyDd'].values[0],
                             'timing': medicine_dose.loc[medicine_dose['brand'] == brand, 'timing'].values[0],
                             'duration': medicine_dose.loc[medicine_dose['brand'] == brand, 'duration'].values[0],
                             'amount': medicine_dose.loc[medicine_dose['brand'] == brand, 'amount'].values[0]}
      else:
          pass
  return doseDict

"""

---
**Model Evaluation**
"""

def splitKFold(data, k):
  dataCollection = dict()
  for i in range(1, k):
      test = data.iloc[(int(len(data)/k)*i):(int(len(data)/k)*(i+1))]
      train = data[~data['id'].isin(test['id'])]
      dataCollection[i] = dict()
      dataCollection[i]['Test'] = test
      dataCollection[i]['Train'] = train
  return dataCollection

#prediction=medsWithDosage & groundTruth=allPivot

def reCall(prediction, groundTruth):
    count = 0
    for i in groundTruth:
        if i in prediction:
            count += 1
    if len(groundTruth) > 0 :
        recall = float(count / len(groundTruth))
        return recall
    else:
        return 0

def Precision(prediction, groundTruth):
  count = 0
  for i in groundTruth:
    if i in prediction:
        count += 1
  if len(prediction) > 0:
    precision = float(count / len(prediction))
    return precision
  else:
    return 0

def f1Score(recall, precision):
  if (float(precision + recall) > 0):
    f1score = float(float(2) * (float(precision * recall)) / (float(precision + recall)))
    return f1score 
  else:
    return 0

def prepro(fullPresc, patients, allPivot):
  patientIds = set(fullPresc['patientId'])
  prescIds = set(fullPresc['id'])
  realPatients = patients[patients['id'].isin(patientIds)]
  realPivot = allPivot[allPivot['id'].isin(prescIds)]
  realPresc = fullPresc[fullPresc['id'].isin(realPivot['id'])]
  return realPresc, realPatients, realPivot

def splitTrainTest(fullPresc, patients, allPivot):
  patientIds = set(fullPresc['patientId'])
  prescIds = set(fullPresc['id'])
  realPatients = patients[patients['id'].isin(patientIds)]
  realPivot = allPivot[allPivot['id'].isin(prescIds)]
  realPresc = fullPresc[fullPresc['id'].isin(realPivot['id'])]
  return realPresc

realPresc, patients, allPivot = prepro(fullPresc, patients, allPivot)

def predict(newPresc, allPresc, allPivot):
  start = time.perf_counter()
  prescDict, similarICD10 = filterICD10(newPresc, allPresc)
  similarPrescription = getSimilarPrescriptions(newPresc, similarICD10, prescDict)
  medicineList = getMedicine(similarPrescription, allPivot)
  groundTruth = getGTMedicine(allPivot)
  medsWithDosage = getMedicineDosage(medicineList)
  recall = reCall(medicineList, groundTruth)
  precision = Precision(medicineList, groundTruth)
  f1score = f1Score(recall, precision)
  end = time.perf_counter()
  runtime = end - start
  return medsWithDosage, recall, precision, f1score, runtime

def validate(data, k):
  allScoreSum = dict()
  for i in tqdm(data):
    print(f'Start of {(i)}-st/th Fold Validation')
    print('=================================')
    trainSet = data[i]['Train']
    testSet = data[i]['Test']
    trainData = splitTrainTest(trainSet, patients, allPivot)
    testData = splitTrainTest(testSet, patients, allPivot)
    # print(testSet.info)
    scoreSum = dict()
    runtimeAll = 0
    generalRecallSum = 0
    generalPrecisionSum = 0
    generalf1ScoreSum = 0
    with tqdm(total=testData.shape[0]) as pbar:
      for index, rows in testData.iterrows():
          #print(rows)
          result, recall, precision, f1score, runtime = predict(rows, trainData, allPivot)
          firstICD10 = json.loads(rows['differentialDiagnosis'])[0]
          if str(firstICD10) not in scoreSum:
              scoreSum[firstICD10] = {'Recall': recall,
                                      'Precision': precision,
                                      'F1 Score': f1score}
              generalRecallSum += recall
              generalPrecisionSum += precision
              generalf1ScoreSum += f1score
              runtimeAll += runtime
              pbar.update(1)
          else:
              scoreSum[firstICD10] = {'Recall': scoreSum[firstICD10]['Recall'] + recall,
                                      'Precision': scoreSum[firstICD10]['Precision'] + precision,
                                      'F1 Score': scoreSum[firstICD10]['F1 Score'] + f1score}              
              generalRecallSum += recall
              generalPrecisionSum += precision
              generalf1ScoreSum += f1score
              runtimeAll += runtime
              pbar.update(1)
    allScoreSum[i] = scoreSum
    avgRecall = generalRecallSum/len(data)
    avgPresicion = generalPrecisionSum/len(data)
    avgF1Score = generalf1ScoreSum/len(data)
    avgRuntime = runtimeAll/len(data)
    #print(f'Average Recall @K : {generalRecallSum/len(data[i])}')
    #print(f'Average Precision @K : {generalPrecisionSum/len(data[i])}')
    #print(f'Average F1 Score @K : {generalf1ScoreSum/len(data[i])}')
    #print(f'Average Runtime : {runtimeAll/len(data[i])}')
  return allScoreSum, avgRecall, avgPresicion, avgF1Score, avgRuntime

#dataCollection = splitKFold(fullPresc, k=10)
dataCollection = splitKFold(realPresc, k=10)

cbcvbcczxcxzczxcxcvxcvxc

allScoreSum, avgRecall, avgPresicion, avgF1Score, avgRuntime = validate(dataCollection, k=10)

print(f'Average Recall: {avgRecall}')
print(f'Average Precision: {avgPresicion}')
print(f'Average F1 Score: {avgF1Score}')
print(f'Average Runtime: {avgRuntime}')

print(f'Average Recall: {avgRecall/10}')
print(f'Average Precision: {avgPresicion/10}')
print(f'Average F1 Score: {avgF1Score/10}')
print(f'Average Runtime: {avgRuntime/10}')

print(f'Average Recall: {avgRecall/10}')
print(f'Average Precision: {avgPresicion/10}')
print(f'Average F1 Score: {avgF1Score/10}')
print(f'Average Runtime: {avgRuntime}')

print(f'Average Recall: {avgRecall*10}')
print(f'Average Precision: {avgPresicion*10}')
print(f'Average F1 Score: {avgF1Score*10}')
print(f'Average Runtime: {avgRuntime}')

#with open("/content/drive/MyDrive/Internship (Retracing Project)/Data/allScoreSum_refinement3.json", "w") as outfile:
#  json.dump(allScoreSum, outfile, indent=4)